package com.openpay.characterr.service;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.openpay.characterr.client.CharacterrClient;
import com.openpay.characterr.dto.Characterr;
import com.openpay.characterr.repository.AuditoryRepository;
import com.openpay.characterr.service.impl.CharacterrServiceImpl;

class CharacterrServiceImplTest {
	
	@Mock
	CharacterrClient characterrClient;
	
	@Mock
	AuditoryRepository auditoryRepository;
	
	@InjectMocks
	CharacterrServiceImpl characterrServiceImpl;
	
	
	@Test
	void finAllCharacters() {
		when(characterrClient.finAllCharacterrs()).thenReturn(getCharacterList());
		List<Characterr> resp = characterrServiceImpl.finAllCharacterrs();
		assertNotNull(resp);
		assertFalse(false);
	}
	
	@Test
	void findBySharedKeyOk() {
		when(clienteRepository.findById(anyString())).thenReturn(Optional.of(getClient()));
		ClienteEntity resp = clienteServiceImpl.findBySharedKey("prueba");
		assertNotNull(resp);
	}
	
	@Test
	void saveCliente() {
		when(clienteRepository.existsById(anyString())).thenReturn(false);
		when(clienteRepository.save(any(ClienteEntity.class))).thenReturn(getClient());
		ClienteEntity resp = clienteServiceImpl.saveCliente(getClient());
		assertNotNull(resp);
	}
	
	@Test
	void deleteCliente() {
		when(clienteRepository.existsById(anyString())).thenReturn(true);
		//when(clienteRepository.deleteById(anyString())).thenReturn(getClient());
		clienteServiceImpl.deleteCliente("prueba");
		assertNotNull(getClient());
	}
	
	private List<Characterr> getCharacterList() {
		List<Characterr> list = new ArrayList<>();
		Characterr character = new Characterr();
		character.setId(1);
		character.setName("prueba");
		character.setDescription("prueba");
		list.add(character);
		return list;
	}
	
	private Characterr getCharacterr() {
		Characterr character = new Characterr();
		character.setId(1);
		character.setName("prueba");
		character.setDescription("prueba");
		return character;
	}
	
}
